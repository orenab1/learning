מה הם 
special regions?

אזורים מותאמים לדרישות מיוחדות כמו דרישות משפטיות.



מה מכיל 
region?


בד"כ שלושה
availabilty zones
שהם מיקומים פיזיים שמכילים כל אחד אחד או יותר 
datacenters
שכול אחד מהם הוא מיקום שמכיל מאות אלפי שרתים
* רצוי להשתמש ב-3 
availabilty zones
בשביל 
high availabilty
















מה הם היתרונות של הענן?


אתה משלם רק על מה שאתה צורך.
אתה יכול לפרוס בכול מקום.
אבטחת מידע מסופקת בדיפולט.
אמינות (גיבויים, DR, שכפול נתונים) מסופקים אוטומטית.
סקלאביליות.
אלסטיות – אפשר לעשות אוטומציה לסקיילינג (למעלה או למטה).
ניהול אוטומטי לחומרה ולתוכנה.


הסבר PASS, SAAS, IAAS

SAAS
תוכנה כשירות – מיועדת ללקוחות. כמו ג'ימייל.
PAAS
פלטפורמה כשירות – מיועדת למפתחים. כמו הרוקו.
IAAS
תשתית כשירות – מיועדת לאדמינים. כמו אז'ור.


הסבר 
Public cloud, private cloud, hybrid

Public
הכול בענן.
נקרא גם
 cloud native

Private
הכול בשרתים של החברה.
נקרא גם
 on premise

היברידי – שילוב עם תקשורת בניהם


מהו TOC
מהו בהקשר של אז'ור, ובהקשר של 
On premise?

Total Cost of Ownership.
באון פרמיס – כולל גם אבטחה פיזית, חומרה, אנשי איי.טי, תחזוקה.

באז'ור – רק יישום, קינפוג, והטמעה.



מה הם 
Capex, opex
בהקשר של עלויות ענן?

capex
capital expenditure
עלויות מראש על תשתיות פיזיות כמו שרתים, אחסון, רשתות וכד'.

Opex
Operational expenditure
עלויות רק תפעוליות. רק עלויות לא פיזיות.
כמו עלויות חישוב ואחסון, רשיונות תוכנה, הכשרת עובדים לעבודה מול הענן וכד'.




מה הן דרכים להשיג 
High availability?

מספר שרתים.
שרתים במספר מיקומים.
באז'ור נקרא:
Availability zones
יש 
Azure Load Balancer.

מה הן הדרכים להשיג 
High scalabilty?
Scale up/ vertical scaling – 
להגדיל שרת.
Scale out/horizontal scaling
להוסיף שרתים.


כיצד נקראים הרכיבים באז'ור שמשיג
High elasticity?

Azure VM Scale Sets
שאוטומטית מוסיף ומוריד שרתים לפי הדרישה או לפי לו"ז.

SQL Server Stretch Database



<!-- submitting only relevant form fields-->
<form (ngSubmit)="onSubmit(f)" #f="ngForm">
  <label>Username</label>
  <input id="username" name="username" [ngModel]="username" />

  <!-- validate field-->
  <input id="email" name="email" email required ngModel #email="ngModel" />
  <span *ngIf="!email.valid && email.touched">Email is not valid</span>

  <select id="secret" [ngModel]="defaultQuestion" name="secret">
    <option value="pet">Pet</option>
    <option value="teacher">teacher</option>
  </select>

  <!-- two ways binding still works-->
  <textarea id="free-text" name="free-text" [(ngModel)]="freeText"></textarea>

  <p>free text is {{ freeText }}</p>

  <!-- grouping elements together-->
  <div ngModelGroup="inputsGroup" #userData="ngModelGroup">
    <input type="text" name="input1" ngModel required/>
    <input type="text" name="input2" ngModel required/>
  </div>
  <p *ngIf='!userData.valid '>User data is not valid!</p>

  <!-- radio buttons-->
  <div  *ngFor='let gender of genders'>
  <input
    type='radio'
    name='gender'
    ngModel
    [value]='gender'
    required
    
  >
  <label>{{gender}}</label>
</div>

    <button (click)="suggestUserName()">Suggest username</button>

  <!-- disable submit button if form is not valid-->
  <button type="submit" [disabled]="!f.valid">submit</button>
</form>
 
